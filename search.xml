<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Concurrent Programming]]></title>
      <url>%2F2016%2F12%2F10%2Fconcurrent-programming%2F</url>
      <content type="text"><![CDATA[并发在应用程序中起着很重要的作用，本文将详细介绍应用级的并发 进程进程是构造并发程序最为简单的方法。在CSAPP的第八章中就已经介绍过：进程本质上就是一个执行中的程序的实例，每当我们运行一个程序的时候就会创建一个进程并在其上运行相关文件。而进程在真正运行的过程中并不是独占处理器的，根据不同的逻辑控制流（每个进程的PC值），不同的进程轮流使用处理器。如果不同的进程在运行过程中有时间的重叠，则两者之间是并发的关系。采用进程的并发方式可以在父子进程之间共享文件，同时两者不同的地址可以避免彼此信息的覆盖问题。但是这种方式不得不采用IPC（进程间通信）的方式来交换彼此的信息，而这是一种开销很大的方式，大大降低运行的速度。 I/O多路复用当我们在浏览一个网页的时候，服务器可以同时处理浏览器发送的请求和用户输入的指令，而这主要采用的就是I/O多路复用的方法。其核心思想就是采用select函数，要求内核挂起进程，仅当一个或多个I/O事件发生后才将其返回给应用程序。本质上这种方法下我们创建自己的逻辑流，利用I/O多路复用来进行流的调度。这种方法的一个最大的优点就是信息交换的便捷，共享数据来得更为高效(无需在流之间切换)，使我们对程序有着更好的掌控但是与此同时，与第一种方法相比，编码量的复杂度大大提升。而且一旦某一逻辑流在读某一文本，其他流就不能读了。这也是不是很高效的一点。 线程什么是线程与进程是运行在系统中的逻辑流对应的，线程是运行在进程中的逻辑流，每个线程都有着唯一的整数ID、栈指针、栈、计数器、寄存器等等，运行在一个进程中的线程共享该进程的整个虚拟地址空间。从本质上讲，这种方法更像是上述两种方法的结合。 线程是如何执行的所有的进程在最开始的时候都是单线程的，这个线程就是主线程。随后在某一时间点主线程会创建一个对等线程并与之一起并发运行（来回切换）由于线程的context对比进程而言要小得多，所以线程之间的切换也要快得多。主线程和对等线程之间基本上是相同的，都能读写相同的共享信息。 线程相关函数创建线程#include &lt;pthread.h&gt; typedef void *(func)(void *);// Returns 0 if OK, nonzero on error int pthread_create(pthread_t *tid, pthread_attr_t *attr, func *f, void *arg); // Returns thread ID of callerpthread_t pthread_self(void); 结束线程当调用下述函数时，主线程会等待所有对等线程终止时在终止自己和整个进程。否则则当线程运行完后隐式终止。 // terminate threads#include &lt;pthread.h&gt; void pthread_exit(void *thread_return); 分离线程在线程被创建后，其默认是可结合的，即可以被其他线程回收杀死，而下面的函数则可以将其分离，仅当其终止时才自动释放存储。 // detach threads#include &lt;pthread.h&gt; int pthread_detach(pthread_t tid); // Returns 0 if OK, nonzero on error 线程中同步变量各个线程彼此之间可以共享变量和文件，但是如果不加限制有时会造成同步错误。因此，在文件或是变量同步(读写)的过程中，并发的程序有着种种的限制。在本书讲pipeline的过程中就介绍过read after write的问题。在pipeline中如果先写后读则读的过程至少需要等待三个周期才能保证不出错（当然在forwarding的方法下我们可以将等待周期减为1个）。同样的，我们在并发线程中进行文件或是变量读写操作的时候，也会遇到类似的问题：如果在某一线程读取某一变量值的同时，另一线程正在对改写这一变量(这里的同时指的并不是完全意义上的同时，而是很短的时间)，由于读和写都要一定时间，这就可能会造成数据的错误。因此我们需要对线程间的变量同步加以限制。主要采用Posix中的 P 和 V 操作。 P(s)：加锁操作。若s非零则将其减1返回，否则挂起线程直至s非零。 V(s)：解锁操作。若有线程被P操作挂起则将s加1，重启该线程。 因此，我们可以通过 P 和 V 操作实现线程中的变量同步。以下代码展示了读者优先的线程，只要有一个读者在读，其他的读者就能忽略锁而毫无障碍的读取变量。 // Global variables int readcnt; // Initially = 0 sem_t mutex, w; // Both initially = 1 void reader(void)&#123; while (1)&#123; P(&amp;mutex); readcnt++; if (readcnt == 1) // First in P(&amp;w); V(&amp;mutex); // Reading happens P(&amp;mutex); readcnt--; if (readcnt == 0) // Last out */ V(&amp;w); V(&amp;mutex); &#125;&#125; 线程中的竞争问题如果我们在构建线程时，每次创建一个新的对等线程都是通过传递一个指向唯一整数ID的指针的话，很有可能会导致程序的错误，因为在这种情况下各个线程会产生竞争。而解决这种问题的方法也很简单，只需要用一个malloc函数为每个线程动态分配一个整数ID的指针，并将这个这个指针传递给构建线程的函数中。同时最后别忘了对指针进行free来避免memory leak。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[proxy-lab]]></title>
      <url>%2F2016%2F12%2F09%2Fproxy-lab%2F</url>
      <content type="text"><![CDATA[Proxy Lab 作为 cmu 18600 以及 15213 这两门课的最后一个lab，其综合性非常强。既需要掌握好 web programming 以及 concurrent programming 的相关知识，还需要结合之前涉及的 shell 和 cache 的相关操作。本文将详细介绍 proxy lab 的解题思路。 什么是proxy首先，我们需要知道什么是proxy？当我们平时打开浏览器的时候，输入一个URL，浏览器会向服务器发送相应的请求，服务器在接收到请求后会将相应的response发回给浏览器，如此循环往复从而加载完网页中的全部内容。此时所有的请求和响应之间的交流全是发生在 client (浏览器)和 server (服务器)之间的。而有时我们会在client和server之间添加代理，来进行相关的处理，这个代理就是实验要求我们完成的proxy。 proxy的大致示意图如下所示 实验准备在本次实验中，我们采用的浏览器是Firefox，设置代理的过程如下所示：打开设置中的高级，选择网络，点设置并按照如下设置（若proxy在本地则选择localhost或是127.0.0.1）需要注意的是，端口一定要和之后运行proxy时的端口一致 proxy如何处理request打开Firefox网页，Mac下alt + cmd + q，Win下按F12进行观察，点击每条可以显示出请求和响应的内容 通过这种方法，我们可以很轻松地看到请求和响应头。 而作为一个proxy，所需要做的事情主要有这么几件： 从请求中获取请求的方法，请求网址的hostname，path以及port（没有的话为80）(有多种方法解析，我采用的是正则表达式) 需要注意的是，本实验中不支持非get的方法，同时也不支持任何以HTTPS开头的网页请求。本实验中以501错误返回这类请求。 改变请求头中的一些内容（比如User-Agent，connection改为close） 添加 Proxy-Connection: close，来确定请求响应的交换是否结束 改变原先请求中的version。（从 HTTP/1.1 到HTTP/1.0） 对网页端发送请求进行修改之后，发送给服务器，再将response返回给网页端，如此循环往复直到网页内容加载完毕 处理多线程操作在完成上述内容之后，我们就实现了一个逐条处理网页端请求的proxy。但是在现实中这样的效率极其低下。所以对于我们的proxy还需要使其支持多线程操作。其所涉及的函数如下所示 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);int pthread_detach(pthread_t thread); 其中pthread_create函数用于打开一个新的线程，通过调用start_routine这个函数，而其中的arg是start_routine函数的参数。特别要注意的是，arg一定要事先进行malloc，为每个线程ID分配一个独立的块，并将指向这个块的指针传给start_routine。不然线程会出现竞争问题导致错误。同时在结束线程时一定要释放这些块来避免memory leak（我就是在这里跪了很久的。。。） 而第二个函数是用于在线程中防止线程被其他线程回收或杀死。 在第一步中加入上述函数，基本上就能够实现proxy的多线程操作的部分。 存储网页内容以上的proxy已经基本完成了代理的要求。不过当我们重复请求某一个网址的时候，它还是要重新加载一遍，这就有点低效了。如果我们能够把之前网页端获取的响应存下来呢？这样当我们重复加载的时候就无需连接到服务器了。所以，我们还要让我们的proxy能够存储网页的内容。在本次实验中，我用一个类似于队列的双向链表来表示存储的cache。proxy在每次处理完网页端发来的请求后，先遍历整个链表，看是否有相同的request存在cache中，如果有就直接获取对应的response。没有的话就现将请求发动到server，将server返回的response写入到cache中。在具体的操作中，我采用的是FIFO，每次都将新的request/response加在链表的头。一旦cache存储已满，就从尾部pop。需要注意的是，一旦找到匹配的request之后，我们还需要将对应的node移到链表的头指针处。这样才符合FIFO。 上述就是我对与proxy lab的总结，希望大家都能做出一个完美的proxy！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[去雾算法浅析]]></title>
      <url>%2F2016%2F11%2F29%2F%E5%8E%BB%E9%9B%BE%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90%2F</url>
      <content type="text"><![CDATA[何凯明博士在09年以 “Single Image Haze Removal Using Dark Channel Prior” 一文技惊四座。此文甚至成为09年的CVPR最佳论文。本篇博文将对这种去雾算法进行简要的分析，并通过自己的实现来更好的进行介绍。 算法核心介绍Foggy Image model]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[First Article]]></title>
      <url>%2F2016%2F11%2F23%2FFirst-Article%2F</url>
      <content type="text"><![CDATA[浮生偷得几日闲，遂作此blog，望与有志者相识于此。 What will be in this blog技术文作为一名计算机专业的学生，开此blog的初衷自然是强化学习的动力，促进自己去研究前沿的知识，并以博文的形式与大家共享。 随笔“意皆有所郁结，不得通其道，故述往事,思来者”，自古这就是知识分子的通病，想来我也不能例外。在本blog中，我也会时不时将自己的所想所感放上来，权当一种情绪宣泄的途径，让各位见笑。 游记二十余载间也游历了不少大好河山，附上游记既可为诸位提供行程指导，同时也为了加深这些美好的印象。 趣谈Why so serious!? Let’s have some fun. What won’t be in this blog负能量正如我们使用Python的理由——“life is short”，何苦牢骚满腹呢。虽说是情绪的宣泄，也只是抒发人生的思考，给出自己的见解，绝非自怨自艾，叹命途多舛，哀人生不公。]]></content>
    </entry>

    
  
  
</search>
